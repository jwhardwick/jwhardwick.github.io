---
layout: post
title:  "COMP2129: Operating Systems and Machine Principles"
date:   2017-06-23 13:48:34 +1000
categories: notes
---

[Fork and Exec](#fork-and-exec)

[C Basics](#c-basics)<br>
1. [Control Structures](#control-structures)<br>
1. [Memory](#memory)<br>
1. [Pointers](#pointers)<br>
1. [Linked Lists](#linked-lists)<br>
1. [File I/O](#file-i/o)<br>
1. [Declarations](#declarations)<br>
1. [Bitwise Operations](#bitwise-operations)<br>
1. [Function Pointers](#function-pointers)<br>
1. [Scope](#scope)<br>


[Compiling](#compiling)<br>
1. [Common Flags](#common-flags)<br>
1. [Stages of Compilation](#stages-of-compilation)<br>
1. [Compiling Large Programs](#compiling-large-programs)<br>

[Data Types](#data-types)<br>
1. [Floating Points](#floating-points)<br>
1. [Integers](#integers)<br>
1. [Structs](#structs)<br>
1. [Unions](#unions)<br>

[Concurrency](#concurrency)<br>
1. [Fork and Exec](#fork-and-exec)<br>
1. [Signals](#signals)<br>
1. [Pipes](#pipes)<br>

[Parallelism](#parallelism)<br>
1. [Threading](#threading)<br>
1. [Deadlock](#deadlock)<br>
1. [Synchronisation](#synchronisation)<br>
1. [Scalable Algorithms](#scalable-algorithms)<br>
1. [Performance](#performance)<br>

[Sample Questions](#sample-questions)<br>



## C Basics ##
### Control Structures ###
### Memory ###
A rough layout of what memory looks like.
![Memory areas]({{ site.url }}/assets/memory-areas.png)

The **stack** is where all variables local to a function are stored, including function arguments.
Calling a function looks like:
1. Push arguments onto stack
2. Push return address onto stack
3. Jump to function code

Then inside the function:
1. Increment the stack pointer to allow space for local variables
2. Execute the code
3. Pop local variables and arguments off the stack
4. Push return result onto the stack
5. Jump to the specified return address

The **heap** is a place where the programmer can dynamically allocate memory to. It is the programmers responsibility to de-allocate memory when finished.

There are several different ways that memory can be allocated.

Malloc - allocates a contiguous block of memory that is *not* zeroed.
{% highlight c %}
size_t n_elements = 10;
int* ptr = malloc(sizeof(int) * n_elements);
{% endhighlight %}

Calloc - allocates a contiguous block of memory that is zeroed.
{% highlight c %}
int* cleared_ptr = calloc(n_elements, sizeof(int));
{% endhighlight %}

Realloc - allocates a new block of memory and copies the provided pointers memory to it. The original memory location is deallocated.
{% highlight c %}
n_elements *= 2;
ptr = realloc(ptr, sizeof(int) * n_elements);
{% endhighlight %}

Free - deallocates the area of memory
{% highlight c %}
free(ptr);
free(cleared_ptr);
// Set to NULL to avoid using them and invoking undefined behaviour
ptr = NULL;
cleared_ptr = NULL;
{% endhighlight %}

Allocating memory will return `NULL` if it fails
{% highlight c %}
#include <assert.h>
float* v = malloc(sizeof(float) * n_elements);
assert(v != NULL);

{% endhighlight %}

### Pointers ###
{% highlight c %}

int* ptr; // Pointer to int
int arr[4]; // Array of 4 ints
int x = 4;
ptr = &x;
arr[1] = x;
arr + 1 == &arr[1]; // These mean the same thing
arr[1] == 4;
// Dereference a pointer
int y = *ptr;
y == x;
{% endhighlight %}

### Linked Lists ###


### File I/O ###

In Unix nearly everything is represented as a file, from devices to directories. Within C, all files use a **stream**, which provides a consistent interface for the programmer to access the file.

Each file that is opened has a file descriptor, which describes the state of the file (opened, closed, position, etc).

{% highlight brainfuck %}
r	 Open a text file for reading
w	 Create a text file for writing
a	 Append to a text file
rb	 Open a binary file for reading
wb	 Open a binary file for writing
ab	 Append to a binary file
r+	 Open a text file for read/write
w+	 Create a text file for read/write
a+	 Append or create a text file for read/write
r+b	 Open a binary file for read/write
w+b	 Create a binary file for read/write
a+b	 Append a binary file for read/write
{% endhighlight %}

How to access files
{% highlight c %}
FILE* f = fopen("filename", "w");
// Find size of file
fseek(f, 0L, SEEK_END);
size_t size = ftell(f);
rewind(f);
// Read from file
char buffer[size];
fread(buffer, sizeof(char), size, f);
// Write to file
fwrite(buffer, sizeof(char), size, f);
fclose(f);
{% endhighlight %}

### Declarations ###

{% highlight c %}
// Type, symbol, size on 64-bit
char        %c   8
int         %d   32
long long   %lli 64
float       %f   32
double      %f   64
size_t      %zu  64
void*       %p   64
{% endhighlight %}

When declaring *const*, read from right to left
{% highlight c %}
// Pointer to const char - fixed value
const char* ptr;
// Const pointer to char - fixed address
char* const ptr;
{% endhighlight %}

{% highlight c %}
// Cast a void pointer
void func(void* a) {
    int* x = (int* ) a;
}

{% endhighlight %}

### Bitwise Operations ###


### Function Pointers ###





### Scope ###

Variables declared within a function are local to that function.

Variables can also be declared globally outside of a function body
{% highlight c %}
// Global - automatically initiliased to 0
int y; // Stored in the data section of memory, accessed globally
extern int z; // Access a global variable from a seperate file
static int x; // Cannot be accessed from other files

void func(void) {
    // Local - is not initialised
    int var = 0; // Exists on the stack and can only be used within func
}

{% endhighlight %}

## Compiling ##
### Common Flags ###
### Stages of Compilation ###

Programs written in human-readable C must be translated into machine code that the processor can understand.
The compilation system has four phases - **P**reprocesser, **C**ompiler, **A**ssembler, and **L**inker

**Preprocessing Phase:**<br>
Modifies the original program according to directives beginning with `#`. For example, `#include <stdio.h>` tells the preprocessor to insert the contents of `stdio.h` and insert it into our program. The result of this phase is another C program, typically with the `.i` suffix

**Compiling Phase:**
The compiler transforms the `.i` file into assembly language. The file has suffix `.s`

**Assembling Phase:**
The assembler translates the `.s` file into machine-language instructions, and stores them in a binary object file `.o`

**Linking Phase:**
Creates a single exectuable file from multiple object files.


## Data Types ##
### Floating Points ###
**Floating point's** are represented by a sign bit, exponent bits, and mantissa bits




### Integers ###
**Unsigned** integers are represented as:<br>
`[0101] = 0*2^3 + 1*2^2 + 0*2&1 + 1*2^0 = 0 + 4 + 0 + 1     = 5`<br>
`[1111] = 1*2^3 + 1*2^2 + 1*2&1 + 1*2^0 = 8 + 4 + 2 + 1     = 15`

**Signed** integers are represented using Two's Complement. The most significant bit is used to represent the sign of the integer, and the number is calculated by giving a *negative* weight to that bit.<br>
`[0101] = -0*2^3 + 1*2^2 + 0*2&1 + 1*2^0 = -0 + 4 + 0 + 1     = 5`<br>
`[1111] = -1*2^3 + 1*2^2 + 1*2&1 + 1*2^0 = -8 + 4 + 2 + 1     = -1`




### Structs ###
### Unions ###

## Concurrency ##
### Fork and Exec ###
Exec switches control of the program to another process
{% highlight c %}
int main(int argc, char *argv[]) {
    if( execl("/usr/bin/sort", "sort", "words.txt", (char *)0) == -1) {
        // Code reaches this point only if exec fails
        perror(argv[0]);
        exit(1);
    }
    return 0;
{% endhighlight %}

Fork creates a child process with a copy of the parent processes memory.

{% highlight c %}
pid_t pid = fork(); // Returns 0 for child, pid of child for parent

if (pid == 0) {
    // Child process
    printf("My pid is %d\n", getpid()); // >>> My pid is 1234
}
if (pid != 0) {
    // Parent process
    printf("Child's pid is %d\n", pid); // >>> Child's pid is 1234
}

{% endhighlight %}

Waiting for processes to finish
{% highlight c %}
int n_children = 10;
pid_t children[n_children];

for (int i = 0; i < n_children; i++) {
    // Create 10 processes
    pid_t pid = fork();
    if (pid != 0) {
    	// Parent
    }
    else {
        // Child
        printf("Process %d Created\n", getpid());
        sleep(10);
        return 0;
    }
}

// Wait for children to finish
int return_status;
for (int i = 0; i < n_children; i++) {
    waitpid(children[i], &status, 0);
    printf("Process %d finished with status code: %d\n", i, status);
}
{% endhighlight %}


### Signals ###
Signals can be sent between processes, and require `#include <signal.h>`. There are quite a few predefined signals (see `man signal`), and two that are reserved for the programmer to use as they see fit.

{% highlight c %}
void do_child_things(void) {
    while(1) {
        // Wait for signal
    }
}
void signal_handler(void) {
    puts("Signal received");
}
int main(void) {
    signal(SIGUSR1, &signal_handler); // Setup the custom signal

    pid_t pid = fork();
    if (pid == 0) {
        // Child process
        do_child_things();
    }
    else {
        sleep(5);
        kill(pid, SIGUSR1); // Send the signal
    }
    return 0;
}

{% endhighlight %}

### Pipes ###
These can be used to send data between processes. Use 1 for writing, 0 for reading.
{% highlight c %}
int pipechild[2];
int ret = pipe(pipechild); // Initialise the pipe
int pid = fork();

if (pid == 0) {
    sleep(1);
    char* message = "Hello from Child";
    int msglen = strlen(message + 1);
    int nwrite = write(pipechild[1], message, msglen);
    if (nwrite < msglen) {
        printf("Message failed to send\n");
        return 1;
    }
} else if pid != 0) {
        char buffer[100];
        int nread = read(pipechild[0], buffer, 100);
        printf("Message received: %s\n", buffer);
    }

}
{% endhighlight %}

## Parallelism ##
### Threading ###
Implemented in C using the `#include <pthread.h>` libray.

Basic threading routine:
{% highlight c %}

void* worker_func(void* arg) {
    int thread_id = *(int *) arg;
    printf("Thread %d says hello\n", thread_id);
    return NULL;
}

int main(void) {
    // Setup
    size_t n_threads = 4;
    pthread_t threads[n_threads];
    int args[n_threads];
    // Create threads
    for (int i = 0; i < n_threads; i++) {
        args[i] = i;
        pthread_create(threads + i, NULL, worker_func, args + i);
    }
    // Wait for threads to finish executing their function
    for (int i = 0; i < n_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    return 0;
}
{% endhighlight %}

When main() terminates, all threads are terminated as well. It is the programmers responsibility to clean up any allocated memory or close any files.

A function, library, or system call is *thread-safe* if it can be called from several threads at once and produce correct results.

### Mutexes ###

Threads that share resources require synchronisation otherwise *race conditions* can occur. This is a situation where multiple threads read and write from shared data, and the final result depends on the relative timing of their execution.

To prevent this from occuring, use locks on critical sections of code to ensure that only one thread is accessing the resource at once.

{% highlight c %}

static pthread_mutex_t lock;
static int counter;

void* worker_func(void* arg) {
    // Do non-critical work
    sleep(5);
    // Enter critical section
    pthread_mutex_lock(&lock);
    counter++;
    pthread_mutex_unlock(&lock);
}
// Creating a lock
pthread_mutex_init(&lock, NULL);
// When you're finished with it
pthread_mutex_destroy(mylock

{% endhighlight %}

### Deadlock ###

A deadlock is a situation where one or more threads are waiting for a resource, but all the resources are already held. There are four conditions that must be met for deadlock to occur:

**Mutual Exclusion:** A resource can be assigned at most one thread

**Hold and Wait:** Threads both hold resources and request other resources

**No Preemption:** Only the thread holding the resource can release it

**Circular Wait:** A cycle exists where threads wait for a resource assigned to another thread

A good way to prevent deadlocks is by enforcing strict locking heirachy. This is where all threads acquire locks in the same order.

### Synchronisation ###

Ensuring that threads aren't inteferring with each other. This costs a certain amount of overhead and may result in a parallel solution being slower than sequential.

**Fine grained** synchronisation

**Livelock** is a situation where threads are busy synchronising, and don't actually get any work done

**Starvation** occurs when one thread is never allowed into a critical section of code

**Semaphores**

Allow a limited number of threads in a section of code at one time. When created they are given a value, and then as threads reach `sem_wait`, they decrement the value by 1. If a thread reaches `sem_wait` and the value is not positive, then it will wait until the value is positive.

{% highlight c %}
static sem_t sem;
static int counter;

void* worker_func(void* arg) {
    // Enter critical section
    sem_wait(&sem);
    counter++;
    sem_post(&sem);
}

sem_init(&sem, 0, 2);

{% endhighlight %}


**Barriers**

Threads arrive at a barrier, and once `n` threads are there `n` threads are allowed through.

{% highlight c %}
pthread_barrier_t my_barrier;

void* worker_func(void* arg) {
    pthread_barrier_wait(&my_barrier);
    // Thread things
}

pthread_barrier_init(&my_barrier, NULL, 3);
pthread_barrier_destroy(&my_barrier);

{% endhighlight %}

**Signals**


{% highlight c %}

pthread_cond_t cv;
pthread_mutex_t lock;

void* worker_func(void* arg) {

    pthread_mutex_lock(&lock);
    // Wait for cond_signal to be called
    pthread_cond_wait(&cv, &lock);
    pthread_mutex_unlock(&lock);
    return NULL;
}

// Setup
pthread_mutex_init(&lock, NULL);
pthread_cond_init(&cv, NULL);

// Signal one thread to pass cond_wait
pthread_cond_signal(&cv);
// Signal all threads to pass through
pthread_cond_broadcast(&cv);

pthread_mutex_destory(&lock);
pthread_cond_destroy(&cv);

{% endhighlight %}

### Scalable Algorithms ###
### Performance ###

## Sample Questions ##
